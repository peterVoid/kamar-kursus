generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  role             UserRole          @default(User)
  sessions         Session[]
  accounts         Account[]
  stripeCustomerId String?           @unique
  enrollments      Enrollment[]
  completedLessons CompletedLesson[]

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

enum UserRole {
  Admin
  User
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id               String       @id @default(uuid())
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            CourseLevel  @default(Beginner)
  category         String
  shortDescription String
  stripePriceId    String       @unique
  slug             String       @unique
  status           CourseStatus @default(Draft)

  chapters    Chapter[]
  enrollments Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CourseStatus {
  Draft
  Publish
  Archive
}

enum CourseLevel {
  Beginner
  Intermediate
  Advance
}

model Chapter {
  id       String @id @default(uuid())
  title    String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String

  lessons Lesson[]
}

model Lesson {
  id           String  @id @default(uuid())
  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?
  position     Int

  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  completedLessons CompletedLesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id        String           @id @default(uuid())
  amount    Int
  status    EnrollmentStatus @default(Pending)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  Pending
  Active
  Cancel
}

model CompletedLesson {
  id       String @id @default(uuid())
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lessonId, userId])
}
